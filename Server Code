# Initializing the Serial port to receive data in version 1

# For this importing pyserial module needs to be installed
import serial
# Since print function is printing values on newline we have to use sys library to tackle that
import sys
import socket

# Serial Port opening
ser = serial.Serial()
ser.port = 'COM1'
ser.open()

# Server Code
s = socket.socket()
host =socket.gethostname()
port = 12345
s.bind((host,port))
s.listen(5)

c,addr = s.accept()
print("Got connection from : ",addr)



# Function to compare the matrix
def compare(curr_matrix, user_matrix):
    '''
    :param curr_matrix:  Current matrix from arduino readings
    :param user_matrix:  Matrix values stored in database
    :return:  boolean value of True of False for Comparing the two matrices
    '''
    return curr_matrix == user_matrix



# Create a matrix to store the incoming data
while True:


    letter = ""
    matrix = []
    var = ser.readline()
    printed_lis = list(var[:-2])
    temp = []

    for i in printed_lis:
        character = str(chr(i))
        temp.append(character)

    # OUTPUT temp -> ['1', '4', '5', ',', '2', '5', '4'] convert this to [145,254]

    var = ""
    i = 0
    end = False

    while i < len(temp) - 1:
        counter = 0
        temp_array = []
        while counter < 3 and not end:
            # Check if value is , if its , then break here and append var values to temp array
            if temp[i] != ",":
                var += temp[i]
            else:
                counter += 1
                temp_array.append(int(var))
                var = ""
            i += 1
            # Check i value equals to array length if yes then array is finished so thus append last values to temp
            if i == len(temp):
                temp_array.append(int(var))
                end = True
        matrix.append(temp_array)

    # Printing the matrix
    # for i in matrix:
    #     print(i)
    # print()

    # <---------------------- COMPARISON PART-------------------------------->#

    # Create matrix for each letter alphabet i.e A, B etc. as well for space

    matrix_A = [[144, 172, 58], [255, 178, 158], [131, 184, 146]]
    matrix_B = [[74, 144, 0], [130, 92, 220], [174, 190, 144]]
    matrix_C = [[12, 39, 14], [57, 131, 211], [94, 72, 20]]
    matrix_D = [[211, 98, 177], [116, 232, 214], [15, 46, 55]]
    matrix_space = [[175, 246, 183], [2, 226, 12], [195, 145, 241]]
    matrix_newLine = [[162, 135, 135], [183, 203, 191], [250, 21, 100]]
    # form a list of matrices with above matrix as a index
    matrices = [matrix_A, matrix_B, matrix_C, matrix_D, matrix_space, matrix_newLine]
    # Letter array to keep track of letters
    Letter = ["A", "B", "C", "D", "  ", "\n"]

    # Loop through each matrix to check if matrix matches with anything

    for index, i in enumerate(matrices):
        # match = False
        # match = compare(i,matrix)
        if compare(i, matrix):
            # Using sys instead of print function due to new line problem
            letter = Letter[index].encode()
            sys.stdout.write(Letter[index])
            sys.stdout.flush()
            c.send(letter)
            break

c.close()
